@startuml
actor "Admin" as Client
participant "TournamentController" as Controller
participant "MatchService" as MatchService
participant "PlayerService" as PlayerService
participant "MatchRepository" as MatchRepository
participant "TournamentService" as TournamentService
participant "EmailService" as EmailService
participant "TournamentRepository" as TournamentRepository

Client -> Controller: processSingleEliminationRound(tournamentId)
activate Controller

Controller -> TournamentService: processSingleEliminationRound(tournamentId)
activate TournamentService

TournamentService -> TournamentService: getTournamentById(tournamentId)
TournamentService -> TournamentRepository: fetch tournament data
TournamentRepository --> TournamentService: return tournament

TournamentService -> TournamentService: getTournamentMatchHistory()
TournamentService -> TournamentService: find first match of next round
alt If first match of next round found
    TournamentService -> TournamentService: getWinnersForCurrentRound(tournamentId, roundNumber)
    TournamentService -> TournamentService: increment round number
    TournamentService -> TournamentRepository: save updated tournament
else If no match found
    TournamentService --> Controller: throw "No NOT_STARTED matches available for the next round"
    deactivate TournamentService
    Controller --> Client: handle error
    return
end

alt If winners are enough for the next round
    TournamentService -> TournamentService: validate winners count (even)
    TournamentService -> TournamentService: assign winners to matches
    TournamentService -> MatchRepository: save updated match
    activate MatchRepository
    MatchRepository --> TournamentService: return saved match
    deactivate MatchRepository

    TournamentService -> EmailService: sendMatchNotification(savedMatch)
    alt If email sent successfully
        EmailService --> TournamentService: success
    else If email failed
        TournamentService -> TournamentService: log error
    end
else If winners count is odd
    TournamentService --> Controller: throw "Odd number of winners, unable to form pairs"
    deactivate TournamentService
    Controller --> Client: handle error
    return
end

TournamentService -> TournamentRepository: save updated tournament
TournamentRepository --> TournamentService: tournament saved

TournamentService --> Controller: return matches
deactivate TournamentService

Controller --> Client: return MatchDTO list
deactivate Controller




@enduml

